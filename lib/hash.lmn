/*
 * hash.lmn - Hash module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
NAME
	Hash module

SYNOPSIS

	hash.init(Size,Array)
	hash.put(Array,Index,NewInt,NewArray)
	hash.get(Array,Index,OldInt,NewArray)

AUTHOR

	Yutaro Tsunekawa

HISTORY

	2016/11/28 original

COMMENTS
  
*/

{
    module(hash).

    Ret = hash.init :- '$callback'('cb_hash_init', Ret).

    Ret = hash.put(Hash, Mem, RetM) :- class(Hash, "hash") |
	'$callback'('cb_hash_put', Hash, Mem, RetM, Ret).

    Ret = hash.get(Hash, Mem, Res, RetM) :- class(Hash, "hash") |
	'$callback'('cb_hash_get', Hash, Mem, Res, RetM, Ret).

    Ret = hash.map_put(Hash, Key, Val) :- class(Hash, "hash") |
	'$callback'('cb_map_put', Hash, Key, Val, Ret).

    Ret = hash.map_get(Hash, Key, Res, Retk) :- class(Hash, "hash") |
	'$callback'('cb_map_get', Hash, Key, Res, Retk, Ret).

    hash.free(Hash) :- class(Hash, "hash") |
	'$callback'('cb_hash_free', Hash).

    Ret = hash.state_map_init :- '$callback'('cb_state_map_init', Ret).

    hash.state_map_free(Map) :- class(Map, "state_map") |
	'$callback'('cb_state_map_free', Map).

    Ret = hash.state_map_find(Map, {$key[]}, Res) :- class(Map, "state_map") |
	'$callback'('cb_state_map_id_find', Map, {$key[]}, Res, Ret).
    Ret = hash.state_map_find(Map, $key, Res) :- class(Map, "state_map"), int($key) |
	'$callback'('cb_state_map_state_find', Map, $key, Res, Ret).

    Ret = hash.set_init :- '$callback'('cb_hash_init', Ret).

    hash.set_free(Set) :- class(Set, "hash") | '$callback'('cb_hash_free', Set).

    Ret = hash.set_insert(Set, Val) :- class(Set, "hash") | '$callback'('cb_set_put', Set, Val, Ret).

    Ret = hash.set_find(Set, Key, Res) :- class(Set, "hash") | '$callback'('cb_set_get', Set, Key, Res, Ret).
}.
