% abp.lmn
% 		2008.10.20  gocho
%
% Altenertive Bit Protocol
% 

% mnum(10000)  -> abp_m10000.il
% mnum(20000)  -> abp_m20000.il
% mnum(40000)  -> abp_m40000.il
% mnum(80000)  -> abp_m80000.il
% mnum(160000) -> abp_m160000.il

% property0 -> メッセージを送信したら絶対にいつか正しい応答が得られる
%               [](p -> <>q)
%
% property1 -> Strong Fairness -> property1
%              daemon内の遷移を公平にした場合はどうなるだろうか, という検証

% msg(Message, Bit).
sender{
  mnum(5).
  msg(0,0).
	ackOK @@ exp(I,B), mnum(Max), ack(0,A) :- A=:=B,J=(I+1) mod Max, C=1-B	|
           msg(J,C), mnum(Max).
	ackNG @@ exp(I,B), ack(0,A) :- A=\=B |
           msg(I,B).
}.

% ack(0, Ack)  key(ExpectedBit).
recver{
  key(0).
  bit_OK @@ key(K), msg(I,B) :- int(I), K=:=B, A=1-K |
            key(A), ack(0,B).
  bit_NG @@ key(K), msg(I,B) :- int(I), K=\=B, A=1-K |
            key(K), ack(0,A).
}.

% message channel
daemon{
  % 破損があるとstrong fairnessを施行しても通信がうまくいかない
  msg_pass @@ msg(I,B) :- m2r(I,B).
  msg_lost @@ msg(I,B) :- int(I), int(B) | .
 // msg_err_ @@ msg(I,B) :- int(I), Z=1-B | m2r(I,Z).
  ack_pass @@ ack(0,A) :- r2s(0,A).
  ack_lost @@ ack(0,A) :- int(A) | .
 // ack_err_ @@ ack(0,A) :- int(A), B=1-A | r2s(0,B).
}.

% communication between processes
s_2_d @@ sender{$s,@s, msg(M,N)}, daemon{$d,@d} :- int(M),int(N) |
         sender{$s,@s, exp(M,N)}, daemon{$d,@d, msg(M,N)}.
d_2_r @@ daemon{$d,@d, m2r(M,N)}, recver{$r,@r} :- int(M),int(N) |
         recver{$r,@r, msg(M,N)}, daemon{$d,@d}.
r_2_d @@ recver{$r,@r, ack(0,A)}, daemon{$d,@d} :-	int(A)	|
         daemon{$d,@d, ack(0,A)}, recver{$r,@r}.
d_2_s @@ daemon{$d,@d, r2s(0,A)}, sender{$s,@s} :-	int(A)	|
		     sender{$s,@s, ack(0,A)}, daemon{$d,@d}.
t_out @@ daemon{@d}, recver{key(K),@r}, sender{exp(M,N), mnum(Max), @s,$s[]}/ :- int(K),int(M),int(N),int(Max) |
         daemon{@d}, recver{key(K),@r}, sender{msg(M,N), mnum(Max), @s}.