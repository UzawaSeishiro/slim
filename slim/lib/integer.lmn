/*
 * integer.lmn - Integer module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */



/*
NAME
	Integer module

SYNOPSIS  
	
AUTHOR
	Koji Hara
	Ken Sakurai
	Atsushi Nakano

HISTORY
	2004/06/04(Fri)
    2008/09/18(Sat) Javaのインラインを使用している部分を削除
*/

{
module(integer).

/**
 * H = '+'(A,B):
 *
 * H is bound to A+B
 */
H='+'(A, B) :- int(A),int(B),A+B=C | H=C.

/**
 * H = '-'(A,B):
 *
 * H is bound to A-B
 */
H='-'(A, B) :- int(A),int(B),A-B=C | H=C.

/**
 * H = '*'(A,B):
 *
 * H is bound to A*B
 */
H='*'(A, B) :- int(A),int(B),A*B=C | H=C.

/**
 * H = '/'(A,B):
 *
 * H is bound to A/B
 */
H='/'(A, B) :- int(A),int(B),A/B=C | H=C.

/**
 * H = mod(A,B):
 *
 * H is bound to A mod B
 */
H=mod(A, B) :- int(A),int(B),A mod B = C | H=C.

/*
 * H = abs(N):
 *
 * H is bound to abs(N)
 */
H=integer.abs(N) :- int(N),N<0 | H=-1*N.
H=integer.abs(N) :- int(N),N>=0 | H=N.

/*
 * H='>'(A,B):
 *
 * H is bound to true when A>B, false otherwise
 */
H='>'(A, B) :- int(A),int(B),A>B | H=true.
H='>'(A, B) :- int(A),int(B),A=<B | H=false.

/*
 * H='<'(A,B):
 *
 * H is bound to true when A<B, false otherwise
 */
H='<'(A, B) :- int(A),int(B),A>=B | H=false.
H='<'(A, B) :- int(A),int(B),A<B | H=true.

/*
 * H='>='(A,B):
 *
 * H is bound to true when A>=B, false otherwise
 */
H='>='(A, B) :- int(A),int(B),A>=B | H=true.
H='>='(A, B) :- int(A),int(B),A<B | H=false.

/*
 * H='=<'(A,B):
 *
 * H is bound to true when A=<B, false otherwise
 */
H='=<'(A, B) :- int(A),int(B),A>B | H=false.
H='=<'(A, B) :- int(A),int(B),A=<B | H=true.

/*
 * H='=='(A,B):
 *
 * H is bound to true when A==B, false otherwise
 */
H='=='(A, B) :- int(A),int(B),A=B | H=true.
H='=='(A, B) :- int(A),int(B),A-B>0 | H=false.
H='=='(A, B) :- int(A),int(B),A-B<0 | H=false.

/* 
 * H='!='(A,B):
 *
 * H is bound to true when A!=B, false otherwise
 */
H='!='(A, B) :- int(A),int(B),A=B | H=false.
H='!='(A, B) :- int(A),int(B),A-B>0 | H=true.
H='!='(A, B) :- int(A),int(B),A-B<0 | H=true.

/*
 * H='<<'(A,B):
 *
 * H is bound to A shift left by N bits
 */
H = '<<'(A, N) :- int(A),int(N),N>0 | H='<<'(A*2,N-1).
H = '<<'(A, 0) :- H=A.

/*
 * H='>>'(A,B):
 *
 * H is bound to A shift right by N bits
 */
H = '>>'(A, N) :- int(A),int(N),N>0 | H='>>'(A/2,N-1).
H = '>>'(A, 0) :- H=A.

/*
 * H = integer.gcd(M, N):
 *
 * H is bound to the gcd of M and N (not fast)
 */
H = integer.gcd(M, N) :- M > N | H=integer.gcd(M-N, N).
H = integer.gcd(M, N) :- N > M | H=integer.gcd(M, N-M).
H = integer.gcd(M, N) :- N = M | H=M.

/*
 * H = lcm(M, N):
 *
 * H is bound to the lcm of M and N (not fast)
 */
H = integer.lcm(M, N) :- int(M),int(N) | H = M*N/integer.gcd(M, N).

/*
 * H = integer.factorial(N):
 *
 * H is bound to the factorial of N
 */
H = integer.factorial(N) :- N =< 1 | H = 1.
H = integer.factorial(N) :- N >= 2 | H = N*integer.factorial(N-1).

/**
 * integer.set($a,$b,$g):
 *
 * Creates a (multi)set $g[$a], $g[$a+1], ..., $g[$b].
 * (e.g., a=set(1,100) --> a=1, ..., a=100)
 * $a and $b must be integers.
 * $g must be a ground term.
 */
integer.set(A,B,C) :- ground(C), int(A), int(B) |
    '$callback'("integer_set", A, B, C).
}.
