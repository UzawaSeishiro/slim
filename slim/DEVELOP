-*- mode: org; -*-
#+STARTUP: showall

* コンパイル
現在Autoconf, Automakeというツールを使っています。これらは,コンパイル
時の環境を検査して,適切なMakefileとconfig.hの作成をします。
autoconfはversion 2.61以上でないとコンパイルできません。

** configureを作る
configureはGNU系のプログラムでよく使われる環境の違いを吸収してくれるス
クリプトです。configure.acのあるディレクトリでコマンドを以下を実行する
事で作成できます。

  $ autoreconf

このconfigureはシステムを検査して，適切なMakefileとconfig.hを作成します。
configureを新しく作る場合やconfigure.ac, Makefile.am src/Makefile.amを
変更した場合は上記のの操作を行いconfigureを作ります。

** 環境変数を設定する

コンパイルを行う為には環境変数 LMNTAL_HOME をJavaによる処理系のパスに設定する必要が
ある。ライブラリのコンパイルにJavaによる処理系のコンパイラ使用するので
これが必要になる。

例: 
 # 最後にスラッシュは付けない
 # $LMNTAL_HOME/binに実行ファイル lmntal があるようにする
 export LMNTAL_HOME=/home/taisuke/workspace/devel  

** .h, .cファイルをsrcディレクトリに追加した場合
src/Makefile.am に追加したファイルを書き加える。

** configureのオプション
./configure 時にオプションが付けられる
- --enable-debug 
-- DEBUG を define する
- --enable-devel
-- 開発用のコンパイルオプションを設定

* コーディング
- C89の仕様に従う
- ただし、autoconfによりinlineキーワードやint32_t型などが使用できる
- 一般的なUnix/Linux環境で動作させる
- 32/64bitで動作させる
- SLIMから外部に公開する関数、型，マクロなどにはlmnで始まるプレフィックスを付ける
- コンパイル時のワーニングはエラーと同等に扱う
- 開発時は--enable-develオプションを使う
- テストは頻繁に実施する
- テストは常に更新する
- ドキュメントとコードに不整合を起こさない

- タブ幅は空白で2
- なるべく全体のコーディングスタイルは同じようにする(厳密ではないが)

* テスト

SLIMディレクトリ以下で 

 make check 

を実行。

* デバッグ
** dmalloc (http://dmalloc.com/)
メモリリークおよび不正なアドレスへの書き込みを検出する

*** 使いかた
http://dmalloc.com/docs/latest/online/dmalloc_4.html#SEC4
にチュートリアルがある。

automakeでdmallocようの機能があったのでそれを使ったときの手順。
$ が付いている行はシェルコマンド

1. $ function dmalloc { eval `command dmalloc -b $*`; }

2. ./configureに --with-dmalloc を付けて実行

3. $ dmalloc -l dmalloc_log -i 100 low 
      * -l dmaloc_log : ログファイルの名前
      * -i 100 : チェックする頻度。数字が小さい方がプログラムは遅くなる
      * low    : チェックする機能の数。 runtime < low < medium < high
                 の順にチェックが多くなる。
4. プログラムを実行
5. ログが dmalloc_log に書かれる

** valgrind (http://valgrind.org/)
メモリリークや未初期化変数の参照、配列のオーバーフローなどを検出できま
す。便利です。

* ドキュメント
- NEWS
-- 各バージョンの変更点

- ChangeLog
-- 未使用

- doc/slim.1.in 
--  manページ

- AUTHORS
-- コントリビュータ

- COPYING
-- 権利の表記

- INSTALL
-- インストール手順

- README
-- ユーザが一番初めに読む
-- ここからインストール/アンインストール手順や使い方への情報が辿れる様
   にする

- DEVELOP(開発用、配布しない)

* 関連資料

autoconf,automakeのマニュアルはオンラインで見ることが出来る。
  autoconfのマニュアル: http://www.gnu.org/software/autoconf/manual/index.html
  automakeのマニュアル: http://sources.redhat.com/automake/automake.html

  また、autoconf,automakeのマニュアルはinfoドキュメントとして提供されて
  おり、インストールされて入ればinfoコマンドを使って読むことが出来る。

* リリースの手順

1. バージョンを増やす
  configure.acファイルの記述で，AC_INITの第二引数を変更。

2. ドキュメントの記述
  NEWSに以前のバージョンからの変更点を記述する。その他，マニュアルペー
  ジなども必要があれば修正する。

3. make distで配布用ファイルを作成する
  make distを実行すると、SLIMディレクトリに
    slim-(バージョン).tar.gz
  というファイルが出来る。これが配布ファイルになる。

  この作業は、SLIM開発作業用のディレクトリで行うと、ローカルの変更が反映されてしまう
  かもしれないので、CVSから新たにチェックアウトした方がいいかも。

4. 配布用ファイルを公開する
  配布物をウェブページに置く。

5. ウェブページの情報を更新
